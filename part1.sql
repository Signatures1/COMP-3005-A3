-- SCHEMA: Part1
SET search_path TO "Part1";

-- DROP SCHEMA IF EXISTS "Part1" ;

CREATE SCHEMA IF NOT EXISTS "Part1"
    AUTHORIZATION postgres;

-- TABLE: students --
CREATE TABLE IF NOT EXISTS students (
  student_id 		    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name  		  TEXT NOT NULL,
  last_name   		  TEXT NOT NULL,
  email       		  TEXT NOT NULL UNIQUE,
  enrollment_date 	DATE
);

-- Initial Data --
INSERT INTO students (first_name, last_name, email, enrollment_date) VALUES
	('John', 'Doe', 'john.doe@example.com', '2023-09-01'),
	('Jane', 'Smith', 'jane.smith@example.com', '2023-09-01'),
	('Jim', 'Beam', 'jim.beam@example.com', '2023-09-02');
ON CONFLICT DO NOTHING;

SET search_path TO "Part1";

CREATE OR REPLACE FUNCTION get_all_students()
RETURNS SETOF students
LANGUAGE sql
AS $$
  SELECT * FROM students ORDER BY student_id;
$$;

CREATE FUNCTION addStudent (
  a_first_name      TEXT,
  a_last_name       TEXT,
  a_email           TEXT,
  a_enrollment_date DATE
) 
RETURNS students
LANGUAGE sql
AS $$
  INSERT INTO students (first_name, last_name, email, enrollment_date)
  VALUES (a_first_name, a_last_name, a_email, a_enrollment_date)
  RETURNING *;
$$;

CREATE FUNCTION updateStudentEmail(student_id INT, new_email TEXT)
RETURNS students
LANGUAGE sql
AS $$
  UPDATE students
  SET email = new_email
  WHERE student_id = student_id
  RETURNING *;
$$;

CREATE FUNCTION deleteStudent(student_id INT)
RETURNS students
LANGUAGE sql
AS $$
  DELETE FROM students
  WHERE student_id = student_id
  RETURNING *;
$$;