-- SCHEMA: Part1
SET search_path TO "Part1";

-- DROP SCHEMA IF EXISTS "Part1" ;

CREATE SCHEMA IF NOT EXISTS "Part1"
    AUTHORIZATION postgres;

-- TABLE: students --
CREATE TABLE IF NOT EXISTS students (
  student_id 		    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name  		  TEXT NOT NULL,
  last_name   		  TEXT NOT NULL,
  email       		  TEXT NOT NULL UNIQUE,
  enrollment_date 	DATE
);

-- Initial Data --
INSERT INTO students (first_name, last_name, email, enrollment_date) VALUES
	('John', 'Doe', 'john.doe@example.com', '2023-09-01'),
	('Jane', 'Smith', 'jane.smith@example.com', '2023-09-01'),
	('Jim', 'Beam', 'jim.beam@example.com', '2023-09-02');

SET search_path TO "Part1";

--GET ALL STUDENTS FUNCTION--
CREATE OR REPLACE FUNCTION getAllStudents()
RETURNS SETOF students
LANGUAGE sql
AS $$
  SELECT *
  FROM students
  ORDER BY student_id;
$$;

--ADD STUDENT FUNCTION--
CREATE OR REPLACE FUNCTION addStudent(
  n_first_name      TEXT, 
  n_last_name       TEXT, 
  n_email           TEXT, 
  n_enrollment_date DATE
)
RETURNS students
LANGUAGE sql
AS $$
  INSERT INTO students(first_name, last_name, email, enrollment_date)
  VALUES (n_first_name, n_last_name, n_email, n_enrollment_date)
  RETURNING *;
$$;

--UPDATE STUDENT EMAIL FUNCTION--
CREATE OR REPLACE FUNCTION updateStudentEmail(
  n_student_id    INT, 
  n_new_email     TEXT
)
RETURNS students
LANGUAGE sql
AS $$
  UPDATE students
  SET email = n_new_email
  WHERE student_id = n_student_id
  RETURN *;
$$;

--DELETE STUDENT FUNCTION--
CREATE OR REPLACE FUNCTION deleteStudent(
  n_student_id  INT
)
RETURNS students
LANGUAGE sql
AS $$
  DELETE FROM students
  WHERE student_id = n_student_id
  RETURN *;
$$;