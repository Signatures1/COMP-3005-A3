-- SCHEMA: Part1
SET search_path TO "Part1";

-- DROP SCHEMA IF EXISTS "Part1" ;

CREATE SCHEMA IF NOT EXISTS "Part1"
    AUTHORIZATION postgres;

-- TABLE: students --
CREATE TABLE IF NOT EXISTS students (
  student_id 		    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name  		  TEXT NOT NULL,
  last_name   		  TEXT NOT NULL,
  email       		  TEXT NOT NULL UNIQUE,
  enrollment_date 	DATE
);

-- Initial Data --
INSERT INTO students (first_name, last_name, email, enrollment_date) VALUES
	('John', 'Doe', 'john.doe@example.com', '2023-09-01'),
	('Jane', 'Smith', 'jane.smith@example.com', '2023-09-01'),
	('Jim', 'Beam', 'jim.beam@example.com', '2023-09-02');
ON CONFLICT DO NOTHING;

CREATE FUNCTION getAllStudents()
RETURNS TABLE (
    student_id INT,
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    enrollment_date DATE
) LANGUAGE plpgsql AS $$

CREATE FUNCTION addStudent (
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    enrollment_date DATE
) RETURNS VOID LANGUAGE plpgsql AS $$
BEGIN 


CREATE FUNCTION updateStudentEmail(student_id INT, new_email TEXT)
RETURNS VOID LANGUAGE plpgsql AS $$

CREATE FUNCTION deleteStudent(student_id INT)
RETURNS VOID LANGUAGE plpgsql AS $$